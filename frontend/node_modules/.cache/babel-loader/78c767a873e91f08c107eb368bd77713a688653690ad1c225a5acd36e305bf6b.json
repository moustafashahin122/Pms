{"ast":null,"code":"// import HomePage from \"./pages/HomePage\";\n// import LoginPage from \"./pages/LoginPage\";\n// // import PrivateComponent from './utils/PrivateComponent';\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link, Navigate, Route, Routes, useNavigate } from 'react-router-dom';\n// import axios from \"axios\";\n// import { BrowserRouter } from \"react-router-dom\";\n// import TestAxios from \"./pages/TestAxios\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getTokens, refreshTokens, setTokens, setUser, updateAuth, logout, setupdateTokensfun, setRunningInterval } from \"./redux/slices/TokensSlice\";\n// import cv from './mah.png';\n// import jwt_decode from \"jwt-decode\";\n// import { applyMiddleware } from \"@reduxjs/toolkit\";\n\n// const Nav = () => {\n//     const dispatch = useDispatch();\n//     const navigate = useNavigate();\n//     const fourMinutes = 2000;\n\n//     const tokens = useSelector((state) => state.TokensSlice.tokens);\n//     const tokensRef = useRef({});\n//     const auth = useSelector((state) => state.TokensSlice.auth);\n//     const user = useSelector((state) => state.TokensSlice.user);\n//     const loggedin = useSelector((state) => state.TokensSlice.loggedin);\n//     const full = useSelector((state) => state.TokensSlice.full);\n//     const running_interval = useSelector((state) => state.TokensSlice.running_interval);\n//     tokensRef.current = tokens;\n\n//     const [tokens_from_local_Storage, setlocals] = useState(() => (localStorage.getItem('Tokens') ? JSON.parse(localStorage.getItem('Tokens')) : null));\n\n//     if (tokens_from_local_Storage && tokens_from_local_Storage.refresh) {\n//         console.log(\"++++++++++++++++local storage+++++++++++++++++++++++++++++++++++++++\");\n\n//         dispatch(setTokens({ refresh: tokens_from_local_Storage.refresh, access: tokens_from_local_Storage.access }));\n\n//     } else {\n//         // alert(\"local storage is empty\");\n//     }\n\n//     if (full === true) {\n//         // console.log(\"ðŸš€ ~ file: App.jsx:14 ~ App ~ tokens:\", tokens);\n\n//     }\n\n//     // dispatch(setTokens({ access: \"sdfdsf\", refresh: \"sdfsf\" }));\n\n//     let intervalRef = useRef(null);\n\n//     useEffect(() => {\n//         if (tokens_from_local_Storage && tokens_from_local_Storage.refresh) {\n//             if (!loggedin) {\n\n//                 dispatch(refreshTokens(tokens_from_local_Storage.refresh));\n\n//                 intervalRef.current = setInterval(() => {\n//                     dispatch(refreshTokens(tokens.refresh));\n//                 }\n//                     , fourMinutes);\n//                 if (!running_interval) {\n//                     console.log('IIIiIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII');\n\n//                     dispatch(setRunningInterval(intervalRef.current));\n//                 }\n\n//             }\n//             else {\n//                 handleLogout();\n\n//             }\n\n//         }\n\n//     }, []);\n\n//     // useEffect(() => {\n\n//     // }, [tokens]);\n\n//     const [pe, setpe] = useState(\"\");\n//     // useEffect(() => {\n//     //   const fetchData = async () => {\n//     //     const res = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n//     //       \"email\": \"moustafashahin122@gmail.com\",\n//     //       \"password\": \"lovelove122@A\"\n\n//     //     }\n//     //     );\n//     //     console.log(\"ðŸš€ ~ file: TestAxios.jsx:13 ~ fetchData ~ res:\", res);\n\n//     //     setpe(await JSON.stringify(res.data.access));\n//     //   };\n//     //   fetchData();\n\n//     // // }, []);\n//     const handleLogout = () => {\n\n//         dispatch(logout());\n//         navigate(\"/login\");\n\n//     };\n\n//     return (\n//         <>\n//             <button onClick={handleLogout}>logout</button>\n//             <div className=\"App\">\n//                 <Link to='/'>home</Link> <br />\n//                 <Link to='/login'>login</Link>\n//                 <Routes>\n//                     <Route element={auth ? < HomePage /> : <Navigate to=\"/login\" />} path=\"/\" exact />\n//                     {!loggedin ? <Route element={<LoginPage />} path=\"/login\" /> : \"\"}\n//                     <Route element={<TestAxios />} path=\"/test\" />\n//                 </Routes>\n//             </div>\n//             {/* {pe} */}\n//             {auth ? (\n//                 // tokens.access\n//                 auth\n\n//             ) : (\n//                 <p>not found\n\n//                     < img src={cv} height=\"500px\" alt=\"\" />\n//                 </p>\n//             )}\n//             <p>home</p>\n//             <p>{auth}</p>\n//             {/* <p>{tokens.access}</p> */}\n//             {/* <p>{tokens.refresh}</p> */}\n//         </>\n//     );\n// };\n\n// export default Nav;","map":{"version":3,"names":[],"sources":["/home/shahin/GithubU/pms-iti/frontend/src/pages/Nav.jsx"],"sourcesContent":["// import HomePage from \"./pages/HomePage\";\n// import LoginPage from \"./pages/LoginPage\";\n// // import PrivateComponent from './utils/PrivateComponent';\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Link, Navigate, Route, Routes, useNavigate } from 'react-router-dom';\n// import axios from \"axios\";\n// import { BrowserRouter } from \"react-router-dom\";\n// import TestAxios from \"./pages/TestAxios\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getTokens, refreshTokens, setTokens, setUser, updateAuth, logout, setupdateTokensfun, setRunningInterval } from \"./redux/slices/TokensSlice\";\n// import cv from './mah.png';\n// import jwt_decode from \"jwt-decode\";\n// import { applyMiddleware } from \"@reduxjs/toolkit\";\n\n// const Nav = () => {\n//     const dispatch = useDispatch();\n//     const navigate = useNavigate();\n//     const fourMinutes = 2000;\n\n//     const tokens = useSelector((state) => state.TokensSlice.tokens);\n//     const tokensRef = useRef({});\n//     const auth = useSelector((state) => state.TokensSlice.auth);\n//     const user = useSelector((state) => state.TokensSlice.user);\n//     const loggedin = useSelector((state) => state.TokensSlice.loggedin);\n//     const full = useSelector((state) => state.TokensSlice.full);\n//     const running_interval = useSelector((state) => state.TokensSlice.running_interval);\n//     tokensRef.current = tokens;\n\n\n\n\n//     const [tokens_from_local_Storage, setlocals] = useState(() => (localStorage.getItem('Tokens') ? JSON.parse(localStorage.getItem('Tokens')) : null));\n\n\n\n\n//     if (tokens_from_local_Storage && tokens_from_local_Storage.refresh) {\n//         console.log(\"++++++++++++++++local storage+++++++++++++++++++++++++++++++++++++++\");\n\n//         dispatch(setTokens({ refresh: tokens_from_local_Storage.refresh, access: tokens_from_local_Storage.access }));\n\n//     } else {\n//         // alert(\"local storage is empty\");\n//     }\n\n\n\n\n\n\n//     if (full === true) {\n//         // console.log(\"ðŸš€ ~ file: App.jsx:14 ~ App ~ tokens:\", tokens);\n\n//     }\n\n\n//     // dispatch(setTokens({ access: \"sdfdsf\", refresh: \"sdfsf\" }));\n\n\n//     let intervalRef = useRef(null);\n\n//     useEffect(() => {\n//         if (tokens_from_local_Storage && tokens_from_local_Storage.refresh) {\n//             if (!loggedin) {\n\n\n//                 dispatch(refreshTokens(tokens_from_local_Storage.refresh));\n\n\n//                 intervalRef.current = setInterval(() => {\n//                     dispatch(refreshTokens(tokens.refresh));\n//                 }\n//                     , fourMinutes);\n//                 if (!running_interval) {\n//                     console.log('IIIiIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII');\n\n//                     dispatch(setRunningInterval(intervalRef.current));\n//                 }\n\n\n\n//             }\n//             else {\n//                 handleLogout();\n\n//             }\n\n\n//         }\n\n\n\n//     }, []);\n\n\n//     // useEffect(() => {\n\n\n//     // }, [tokens]);\n\n\n\n\n\n//     const [pe, setpe] = useState(\"\");\n//     // useEffect(() => {\n//     //   const fetchData = async () => {\n//     //     const res = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n//     //       \"email\": \"moustafashahin122@gmail.com\",\n//     //       \"password\": \"lovelove122@A\"\n\n//     //     }\n//     //     );\n//     //     console.log(\"ðŸš€ ~ file: TestAxios.jsx:13 ~ fetchData ~ res:\", res);\n\n//     //     setpe(await JSON.stringify(res.data.access));\n//     //   };\n//     //   fetchData();\n\n//     // // }, []);\n//     const handleLogout = () => {\n\n\n\n\n\n//         dispatch(logout());\n//         navigate(\"/login\");\n\n//     };\n\n\n\n//     return (\n//         <>\n//             <button onClick={handleLogout}>logout</button>\n//             <div className=\"App\">\n//                 <Link to='/'>home</Link> <br />\n//                 <Link to='/login'>login</Link>\n//                 <Routes>\n//                     <Route element={auth ? < HomePage /> : <Navigate to=\"/login\" />} path=\"/\" exact />\n//                     {!loggedin ? <Route element={<LoginPage />} path=\"/login\" /> : \"\"}\n//                     <Route element={<TestAxios />} path=\"/test\" />\n//                 </Routes>\n//             </div>\n//             {/* {pe} */}\n//             {auth ? (\n//                 // tokens.access\n//                 auth\n\n//             ) : (\n//                 <p>not found\n\n\n\n//                     < img src={cv} height=\"500px\" alt=\"\" />\n//                 </p>\n//             )}\n//             <p>home</p>\n//             <p>{auth}</p>\n//             {/* <p>{tokens.access}</p> */}\n//             {/* <p>{tokens.refresh}</p> */}\n//         </>\n//     );\n// };\n\n// export default Nav;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;;AAOA;AACA;;AAEA;;AAGA;;AAGA;;AAEA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;;AAEA;;AAGA;;AAIA;;AAGA;;AAGA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}