{"ast":null,"code":"var _jsxFileName = \"/home/shahin/GithubU/pms-iti/frontend/src/pages/LoginPage.jsx\";\nimport React from 'react';\nimport { setTokens, setUser, updateAuth } from '../redux/slices/TokensSlice';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  // const dispatch = useDispatch();\n\n  // const navigate = useNavigate();\n\n  // // const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n  // //   \"refresh\": refresh,\n\n  // // }\n  // // );\n\n  //  const  loginUser = async (e) => {\n  //   e.preventDefault();\n\n  //   try {\n\n  //     const response = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n  //       \"email\": e.target.email.value,\n  //       \"password\": e.target.password.value\n\n  //     }\n\n  //     );\n\n  //     const { access, refresh } = response.data;\n  //     console.log(\"ðŸš€ ~ file: LoginPage.jsx:30 ~ loginUser ~ refresh:\", refresh);\n  //     console.log(\"ðŸš€ ~ file: LoginPage.jsx:30 ~ loginUser ~ response:\", response);\n  //     if (response.status === 200) {\n  //       dispatch(updateAuth(true));\n  //       dispatch(setUser(jwt_decode(access)));\n  //       dispatch(setTokens({ access, refresh }));\n\n  //       // setAuthTokens(data);\n  //       // setUser(jwt_decode(data.access));\n  //       localStorage.setItem('Tokens', JSON.stringify(response.data));\n  //       navigate('/');\n  //     } else {\n  //       alert('Something went wrong!');\n  //     }\n\n  //   } catch (error) {\n  //     alert('Something went wrong!' + error.response.status);\n\n  //   }\n\n  // };\n\n  // const updateToken = async () => {\n\n  //   let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ 'refresh': authTokens?.refresh })\n  //   });\n\n  //   let data = await response.json();\n\n  //   if (response.status === 200) {\n  //     setAuthTokens(data);\n  //     setUser(jwt_decode(data.access));\n  //     localStorage.setItem('authTokens', JSON.stringify(data));\n  //   } else {\n  //     logoutUser();\n  //   }\n\n  //   if (loading) {\n  //     setLoading(false);\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: loginUser,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        id: \"\",\n        placeholder: \"enter your email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","setTokens","setUser","updateAuth","useDispatch","axios","useNavigate","jwt_decode","jsxDEV","_jsxDEV","LoginPage","children","onSubmit","loginUser","type","name","id","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/shahin/GithubU/pms-iti/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { setTokens, setUser, updateAuth } from '../redux/slices/TokensSlice';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from \"jwt-decode\";\n\nconst LoginPage = () => {\n\n  // const dispatch = useDispatch();\n\n  // const navigate = useNavigate();\n\n  // // const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n  // //   \"refresh\": refresh,\n\n  // // }\n  // // );\n\n  //  const  loginUser = async (e) => {\n  //   e.preventDefault();\n\n\n  //   try {\n\n  //     const response = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n  //       \"email\": e.target.email.value,\n  //       \"password\": e.target.password.value\n\n  //     }\n\n  //     );\n\n\n  //     const { access, refresh } = response.data;\n  //     console.log(\"ðŸš€ ~ file: LoginPage.jsx:30 ~ loginUser ~ refresh:\", refresh);\n  //     console.log(\"ðŸš€ ~ file: LoginPage.jsx:30 ~ loginUser ~ response:\", response);\n  //     if (response.status === 200) {\n  //       dispatch(updateAuth(true));\n  //       dispatch(setUser(jwt_decode(access)));\n  //       dispatch(setTokens({ access, refresh }));\n\n  //       // setAuthTokens(data);\n  //       // setUser(jwt_decode(data.access));\n  //       localStorage.setItem('Tokens', JSON.stringify(response.data));\n  //       navigate('/');\n  //     } else {\n  //       alert('Something went wrong!');\n  //     }\n\n  //   } catch (error) {\n  //     alert('Something went wrong!' + error.response.status);\n\n  //   }\n\n\n  // };\n\n\n\n\n\n\n\n\n\n\n  // const updateToken = async () => {\n\n  //   let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ 'refresh': authTokens?.refresh })\n  //   });\n\n  //   let data = await response.json();\n\n  //   if (response.status === 200) {\n  //     setAuthTokens(data);\n  //     setUser(jwt_decode(data.access));\n  //     localStorage.setItem('authTokens', JSON.stringify(data));\n  //   } else {\n  //     logoutUser();\n  //   }\n\n  //   if (loading) {\n  //     setLoading(false);\n  //   }\n  // }\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div><form onSubmit={loginUser} >\n      <input type=\"text\" name=\"email\" id=\"\" placeholder='enter your email' />\n\n      <input type=\"password\" name=\"password\" id=\"\" />\n      <input type=\"submit\" />\n\n    </form></div>);\n};\n\nexport default LoginPage;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,OAAO,EAAEC,UAAU,QAAQ,6BAA6B;AAC5E,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAEtB;;EAEA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAGA;;EAEA;EACA;EACA;;EAEA;;EAEA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAGA;;EAWA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAaA,oBACED,OAAA;IAAAE,QAAA,eAAKF,OAAA;MAAMG,QAAQ,EAAEC,SAAU;MAAAF,QAAA,gBAC7BF,OAAA;QAAOK,IAAI,EAAC,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,EAAE,EAAC,EAAE;QAACC,WAAW,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEvEZ,OAAA;QAAOK,IAAI,EAAC,UAAU;QAACC,IAAI,EAAC,UAAU;QAACC,EAAE,EAAC;MAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/CZ,OAAA;QAAOK,IAAI,EAAC;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACjB,CAAC;AAACC,EAAA,GAxGIZ,SAAS;AA0Gf,eAAeA,SAAS;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}