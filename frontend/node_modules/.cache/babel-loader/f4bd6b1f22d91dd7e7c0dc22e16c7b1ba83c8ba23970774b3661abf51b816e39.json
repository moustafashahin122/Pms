{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nconst initialState = {\n  tokens: {},\n  user: {},\n  full: false,\n  auth: false,\n  // updateTokensfun: {},\n  running_interval: \"\",\n  loggedin: false\n};\nexport const getTokens = createAsyncThunk(\"getTokens\", async () => {\n  const {\n    data\n  } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n    \"email\": \"moustafashahin122@gmail.com\",\n    \"password\": \"lovelove122@A\"\n  });\n  console.log(data);\n  // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:23 ~ getTokens ~ data:\", data);\n  return data;\n});\nexport const refreshTokens = createAsyncThunk(\"refreshTokens\", async refresh => {\n  const {\n    data\n  } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n    \"refresh\": refresh\n  });\n  console.log(\"ðŸš€ ~ file: TokensSlice.jsx:33 ~ refreshTokens ~ data.access:\", data.access);\n  return data;\n});\nconst TokensSlice = createSlice({\n  name: \"Tokens\",\n  initialState,\n  reducers: {\n    setTokens: (state, action) => {\n      const {\n        access,\n        refresh\n      } = action.payload;\n      // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:34 ~ access:\", access);\n      state.tokens.access = access;\n      state.tokens.refresh = refresh;\n    },\n    logout: (state, action) => {\n      if (state.running_interval) {\n        console.log(\"ðŸš€ ~ file: TokensSlice.jsx:62 ~ state.running_interval:\", state.running_interval);\n        clearInterval(state.running_interval);\n      }\n      localStorage.clear();\n      alert(\"logou\");\n      state.tokens = {};\n      state.auth = false;\n      state.user = {};\n      state.loggedin = false;\n    },\n    setUser: (state, action) => {\n      const {\n        user_id\n      } = action.payload;\n      state.user.user_id = user_id;\n    },\n    updateAuth: (state, action) => {\n      state.auth = action.payload;\n    },\n    setRunningInterval: (state, action) => {\n      if (state.running_interval) {\n        state.running_interval = action.payload;\n        console.log(\"///////////////////////////////////////////////////////////////////////////////\");\n        console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ state.running_interval:\", state.running_interval);\n      } else {\n        alert(\"there is another interval running\");\n      }\n    },\n    setLoggedIn: (state, action) => {\n      state.loggedin = true;\n    },\n    setupdateTokensfun: (state, action) => {\n      state.updateTokensfun = action.payload;\n    }\n    // refreshTokens: (state) => {\n    //   state.auth ;\n\n    // },\n  },\n\n  extraReducers: builder => {\n    builder.addCase(getTokens.fulfilled, (state, action) => {\n      state.tokens = action.payload;\n      // state.tokens.access = access;\n      // state.tokens.refresh = refresh;\n      // console.log(\"dssssssssssssssssssssssssssssss\", state.tokens.access);\n      state.full = true;\n    });\n    builder.addCase(refreshTokens.fulfilled, (state, action) => {\n      state.tokens.access = action.payload.access;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:88 ~ builder.addCase ~ action.payload.access:\", action.payload.access);\n      console.log(\"*******************************************************************\");\n      state.auth = true;\n      const {\n        user_id\n      } = jwt_decode(state.tokens.access);\n      state.user.user_id = user_id;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ builder.addCase ~ user_id:\", user_id);\n    });\n    builder.addCase(refreshTokens.rejected, (state, action) => {\n      alert(\"failed to refresh\");\n    });\n  }\n});\nexport const {\n  setTokens,\n  updateAuth,\n  setUser,\n  logout,\n  setupdateTokensfun,\n  setRunningInterval,\n  setLoggedIn\n} = TokensSlice.actions;\nexport default TokensSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","jwt_decode","initialState","tokens","user","full","auth","running_interval","loggedin","getTokens","data","post","console","log","refreshTokens","refresh","access","TokensSlice","name","reducers","setTokens","state","action","payload","logout","clearInterval","localStorage","clear","alert","setUser","user_id","updateAuth","setRunningInterval","setLoggedIn","setupdateTokensfun","updateTokensfun","extraReducers","builder","addCase","fulfilled","rejected","actions","reducer"],"sources":["/home/shahin/GithubU/pms-iti/frontend/src/redux/slices/TokensSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\n\n\n\nconst initialState = {\n  tokens: {},\n  user: {},\n  full: false,\n  auth: false,\n  // updateTokensfun: {},\n  running_interval: \"\",\n  loggedin: false,\n};\n\nexport const getTokens = createAsyncThunk(\"getTokens\", async () => {\n  const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n    \"email\": \"moustafashahin122@gmail.com\",\n    \"password\": \"lovelove122@A\"\n\n  }\n  );\n  console.log(data);\n  // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:23 ~ getTokens ~ data:\", data);\n  return data;\n});\n\n\n\n\n\n\nexport const refreshTokens = createAsyncThunk(\"refreshTokens\", async (refresh) => {\n\n  const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n    \"refresh\": refresh,\n  }\n  );\n  console.log(\"ðŸš€ ~ file: TokensSlice.jsx:33 ~ refreshTokens ~ data.access:\", data.access);\n  return data;\n\n}\n);\nconst TokensSlice = createSlice({\n  name: \"Tokens\",\n  initialState,\n  reducers: {\n\n\n    setTokens: (state, action) => {\n\n      const { access, refresh } = action.payload;\n      // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:34 ~ access:\", access);\n      state.tokens.access = access;\n      state.tokens.refresh = refresh;\n    },\n\n    logout: (state, action) => {\n      if (state.running_interval) {\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:62 ~ state.running_interval:\", state.running_interval)\n\n\n        clearInterval(state.running_interval);\n      }\n\n      localStorage.clear();\n      alert(\"logou\");\n      state.tokens = {};\n      state.auth = false;\n      state.user = {};\n      state.loggedin = false;\n\n    },\n    setUser: (state, action) => {\n\n      const { user_id } = action.payload;\n      state.user.user_id = user_id;\n\n    },\n    updateAuth: (state, action) => {\n\n      state.auth = action.payload;\n\n\n    },\n    setRunningInterval: (state, action) => {\n      if (state.running_interval) {\n        state.running_interval = action.payload;\n        console.log(\"///////////////////////////////////////////////////////////////////////////////\");\n        console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ state.running_interval:\", state.running_interval);\n\n      } else {\n        alert(\"there is another interval running\");\n      }\n\n\n\n    },\n    setLoggedIn: (state, action) => {\n\n      state.loggedin = true;\n\n\n    },\n    setupdateTokensfun: (state, action) => {\n\n      state.updateTokensfun = action.payload;\n\n\n    },\n    // refreshTokens: (state) => {\n    //   state.auth ;\n\n\n    // },\n\n\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(getTokens.fulfilled, (state, action) => {\n      state.tokens = action.payload;\n      // state.tokens.access = access;\n      // state.tokens.refresh = refresh;\n      // console.log(\"dssssssssssssssssssssssssssssss\", state.tokens.access);\n      state.full = true;\n    });\n    builder.addCase(refreshTokens.fulfilled, (state, action) => {\n      state.tokens.access = action.payload.access;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:88 ~ builder.addCase ~ action.payload.access:\", action.payload.access);\n\n      console.log(\"*******************************************************************\");\n      state.auth = true;\n      const { user_id } = jwt_decode(state.tokens.access);\n      state.user.user_id = user_id;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ builder.addCase ~ user_id:\", user_id);\n\n\n    });\n    builder.addCase(refreshTokens.rejected, (state, action) => {\n\n      alert(\"failed to refresh\");\n    });\n  },\n});\nexport const { setTokens, updateAuth, setUser, logout, setupdateTokensfun, setRunningInterval, setLoggedIn } = TokensSlice.actions;\n\nexport default TokensSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}