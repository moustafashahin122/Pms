{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nconst initialState = {\n  tokens: {},\n  user: {},\n  full: false,\n  auth: false\n};\nexport const getTokens = createAsyncThunk(\"getTokens\", async () => {\n  const {\n    data\n  } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n    \"email\": \"moustafashahin122@gmail.com\",\n    \"password\": \"lovelove122@A\"\n  });\n  console.log(data);\n  // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:23 ~ getTokens ~ data:\", data);\n  return data;\n});\n\n// export const refreshTokens = createAsyncThunk(\"refreshTokens\", async (refresh) => {\n\n//   const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n//     \"refresh\": refresh,\n//   }\n//   );\n//   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:33 ~ refreshTokens ~ data.access:\", data.access);\n//   return data;\n\n// }\n// );\nconst TokensSlice = createSlice({\n  name: \"Tokens\",\n  initialState,\n  reducers: {\n    setTokens: (state, action) => {\n      const {\n        access,\n        refresh\n      } = action.payload;\n      // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:34 ~ access:\", access);\n      state.tokens.access = access;\n      state.tokens.refresh = refresh;\n    },\n    setUser: (state, action) => {\n      const {\n        user_id\n      } = action.payload;\n      state.user.user_id = user_id;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:44 ~ user_id:\", user_id);\n    },\n    updateAuth: (state, action) => {\n      state.auth = action.payload;\n    }\n    // refreshTokens: (state) => {\n    //   state.auth ;\n\n    // },\n  },\n\n  extraReducers: builder => {\n    builder.addCase(getTokens.fulfilled, (state, action) => {\n      state.tokens = action.payload;\n      // state.tokens.access = access;\n      // state.tokens.refresh = refresh;\n      // console.log(\"dssssssssssssssssssssssssssssss\", state.tokens.access);\n      state.full = true;\n    });\n    // builder.addCase(refreshTokens.fulfilled, (state, action) => {\n    //   state.tokens.access = action.payload.access;\n    //   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:88 ~ builder.addCase ~ action.payload.access:\", action.payload.access);\n\n    //   state.auth = true;\n    //   const { user_id } = jwt_decode(state.tokens.access);\n    //   state.user.user_id = user_id;\n    //   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ builder.addCase ~ user_id:\", user_id);\n    //   localStorage.setItem('Tokens', JSON.stringify(state.tokens));\n\n    // });\n    // builder.addCase(refreshTokens.rejected, (state, action) => {\n    //   // logout\n    //   alert(\"failed to refresh\");\n    // });\n  }\n});\n\nexport const {\n  setTokens,\n  updateAuth,\n  setUser\n} = TokensSlice.actions;\nexport default TokensSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","jwt_decode","initialState","tokens","user","full","auth","getTokens","data","post","console","log","TokensSlice","name","reducers","setTokens","state","action","access","refresh","payload","setUser","user_id","updateAuth","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["/home/shahin/GithubU/pms-iti/frontend/src/redux/slices/TokensSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\n\n\n\nconst initialState = {\n  tokens: {},\n  user: {},\n  full: false,\n  auth: false,\n};\n\nexport const getTokens = createAsyncThunk(\"getTokens\", async () => {\n  const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/create/\", {\n    \"email\": \"moustafashahin122@gmail.com\",\n    \"password\": \"lovelove122@A\"\n\n  }\n  );\n  console.log(data);\n  // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:23 ~ getTokens ~ data:\", data);\n  return data;\n});\n\n\n\n\n\n\n// export const refreshTokens = createAsyncThunk(\"refreshTokens\", async (refresh) => {\n\n//   const { data } = await axios.post(\"http://127.0.0.1:8000/auth/jwt/refresh/\", {\n//     \"refresh\": refresh,\n//   }\n//   );\n//   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:33 ~ refreshTokens ~ data.access:\", data.access);\n//   return data;\n\n// }\n// );\nconst TokensSlice = createSlice({\n  name: \"Tokens\",\n  initialState,\n  reducers: {\n\n\n    setTokens: (state, action) => {\n\n      const { access, refresh } = action.payload;\n      // console.log(\"ðŸš€ ~ file: TokensSlice.jsx:34 ~ access:\", access);\n      state.tokens.access = access;\n      state.tokens.refresh = refresh;\n    },\n    setUser: (state, action) => {\n\n      const { user_id } = action.payload;\n      state.user.user_id = user_id;\n      console.log(\"ðŸš€ ~ file: TokensSlice.jsx:44 ~ user_id:\", user_id);\n\n    },\n    updateAuth: (state, action) => {\n\n      state.auth = action.payload;\n\n\n    },\n    // refreshTokens: (state) => {\n    //   state.auth ;\n\n\n    // },\n\n\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(getTokens.fulfilled, (state, action) => {\n      state.tokens = action.payload;\n      // state.tokens.access = access;\n      // state.tokens.refresh = refresh;\n      // console.log(\"dssssssssssssssssssssssssssssss\", state.tokens.access);\n      state.full = true;\n    });\n    // builder.addCase(refreshTokens.fulfilled, (state, action) => {\n    //   state.tokens.access = action.payload.access;\n    //   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:88 ~ builder.addCase ~ action.payload.access:\", action.payload.access);\n\n\n    //   state.auth = true;\n    //   const { user_id } = jwt_decode(state.tokens.access);\n    //   state.user.user_id = user_id;\n    //   console.log(\"ðŸš€ ~ file: TokensSlice.jsx:89 ~ builder.addCase ~ user_id:\", user_id);\n    //   localStorage.setItem('Tokens', JSON.stringify(state.tokens));\n\n    // });\n    // builder.addCase(refreshTokens.rejected, (state, action) => {\n    //   // logout\n    //   alert(\"failed to refresh\");\n    // });\n  },\n});\nexport const { setTokens, updateAuth, setUser } = TokensSlice.actions;\n\nexport default TokensSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAKnC,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CAAC,CAAC;EACVC,IAAI,EAAE,CAAC,CAAC;EACRC,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGT,gBAAgB,CAAC,WAAW,EAAE,YAAY;EACjE,MAAM;IAAEU;EAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,wCAAwC,EAAE;IAC1E,OAAO,EAAE,6BAA6B;IACtC,UAAU,EAAE;EAEd,CACA,CAAC;EACDC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB;EACA,OAAOA,IAAI;AACb,CAAC,CAAC;;AAOF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMI,WAAW,GAAGb,WAAW,CAAC;EAC9Bc,IAAI,EAAE,QAAQ;EACdX,YAAY;EACZY,QAAQ,EAAE;IAGRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAE5B,MAAM;QAAEC,MAAM;QAAEC;MAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC1C;MACAJ,KAAK,CAACb,MAAM,CAACe,MAAM,GAAGA,MAAM;MAC5BF,KAAK,CAACb,MAAM,CAACgB,OAAO,GAAGA,OAAO;IAChC,CAAC;IACDE,OAAO,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAE1B,MAAM;QAAEK;MAAQ,CAAC,GAAGL,MAAM,CAACG,OAAO;MAClCJ,KAAK,CAACZ,IAAI,CAACkB,OAAO,GAAGA,OAAO;MAC5BZ,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEW,OAAO,CAAC;IAElE,CAAC;IACDC,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAE7BD,KAAK,CAACV,IAAI,GAAGW,MAAM,CAACG,OAAO;IAG7B;IACA;IACA;;IAGA;EAGF,CAAC;;EAEDI,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACnB,SAAS,CAACoB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACb,MAAM,GAAGc,MAAM,CAACG,OAAO;MAC7B;MACA;MACA;MACAJ,KAAK,CAACX,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC;IACF;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;;AACF,OAAO,MAAM;EAAEU,SAAS;EAAEQ,UAAU;EAAEF;AAAQ,CAAC,GAAGT,WAAW,CAACgB,OAAO;AAErE,eAAehB,WAAW,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}